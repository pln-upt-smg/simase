name: Docker

on:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Install Github Action Checkout
        uses: actions/checkout@v2

      - name: 📥 Install Docker Layer Caching
        uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true

      - name: 📥 Install PHP v8.0 and Composer v2
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.0"

      - name: 🔻 Shutdown Default Ubuntu MySQL Service
        run: sudo service mysql stop

      - name: ⚙️ Set up Application Environment Variables for CI/CD (Production)
        run: |
          php -r "file_exists('.env') || copy('.env.example', '.env');"
          sed -i 's/localhost/127.0.0.1/' .env
          sed -i 's/APP_ENV=local/APP_ENV=production/' .env
          sed -i 's/APP_ENV_CI_CD=false/APP_ENV_CI_CD=true/' .env
          sed -i 's/APP_DEBUG=true/APP_DEBUG=false/' .env
          sed -i 's/DB_HOST=127.0.0.1/DB_HOST=mysql/' .env

      - name: 📦 Install Composer Dependencies
        uses: ramsey/composer-install@v1

      - name: 🔨 Build Application Image
        run: docker compose build

      - name: 🔼 Run Application Container (Detached Mode)
        run: docker compose up -d

      - name: 💤 Wait Application Containers to be ready
        uses: juliangruber/sleep-action@v1
        with:
          time: 10s

      - name: 🔍 Check Docker Containers Status
        run: docker ps -a

      - name: 🪵 Check Docker App Containers Log
        run: docker logs simase-laravel.test-1

      - name: 🪵 Check Docker MySQL Containers Log
        run: docker logs simase-mysql-1

      - name: 🪵 Check Docker Redis Containers Log
        run: docker logs simase-redis-1

      - name: 🚨 Set Application Directory Permissions
        run: |
          docker exec -t simase-laravel.test-1 chmod -R ug+rwx storage bootstrap/cache
          docker exec -t simase-laravel.test-1 chmod -R g+w storage/logs

      - name: 📦 Install NPM Dependencies
        run: docker exec -t simase-laravel.test-1 npm i

      - name: 🔑 Generate Application Key
        run: docker exec -t simase-laravel.test-1 php artisan key:generate

      - name: 💾 Link Application Storage
        run: docker exec -t simase-laravel.test-1 php artisan storage:link

      - name: 🗄️ Run Database Migration
        run: docker exec -t simase-laravel.test-1 php artisan migrate --force

      - name: 🔄 Verify Database Rollback
        run: docker exec -t simase-laravel.test-1 php artisan migrate:refresh --force

      - name: 🗃️ Run Database Seeder
        run: docker exec -t simase-laravel.test-1 php artisan db:seed --force

      - name: 🗑️ Clear Laravel Cache
        run: docker exec -t simase-laravel.test-1 php artisan optimize:clear

      - name: 🔧 Optimize Laravel Configuration
        run: |
          docker exec -t simase-laravel.test-1 php artisan optimize
          docker exec -t simase-laravel.test-1 php artisan view:cache

      - name: 🧪 Run Application Linter (Static Code Analyzer) via PHPStan
        run: docker exec -t simase-laravel.test-1 composer lint

      - name: 🛑 Stop Application Containers
        run: docker compose down

      - name: 🗝️ Log in to the Container Registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Extract Metadata for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: 🗑️ Prune unused Docker volumes and images
        run: |
          docker volume prune -f
          docker image prune -f

      - name: 📀 Push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ./docker/8.1
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            WWWGROUP=1000
            WWWUSER=1000
